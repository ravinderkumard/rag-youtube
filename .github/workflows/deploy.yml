name: Deploy to ECS

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      ECR_BACKEND_URL: ${{ secrets.ECR_BACKEND_URL }}
      ECR_FRONTEND_URL: ${{ secrets.ECR_FRONTEND_URL }}
      ECS_CLUSTER_NAME: ${{ secrets.ECS_CLUSTER_NAME }}
      ECS_SERVICE_NAME: ${{ secrets.ECS_SERVICE_NAME }}
      ALB_DNS: ${{ secrets.ALB_DNS }} # Add ALB DNS as a secret

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # ---------------------------
      # Backend
      # ---------------------------
      - name: Login to ECR Backend
        run: |
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_BACKEND_URL

      - name: Build & Push Backend Docker Image
        run: |
          docker build -t rag-backend ./backend
          docker tag rag-backend:latest $ECR_BACKEND_URL:latest
          docker push $ECR_BACKEND_URL:latest

      # ---------------------------
      # Frontend
      # ---------------------------
      - name: Set NEXT_PUBLIC_API_URL for frontend
        run: echo "NEXT_PUBLIC_API_URL=http://${ALB_DNS}:18000" >> $GITHUB_ENV

      - name: Login to ECR Frontend
        run: |
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_FRONTEND_URL

      - name: Build & Push Frontend Docker Image
        run: |
          docker build --build-arg NEXT_PUBLIC_API_URL=$NEXT_PUBLIC_API_URL -t rag-frontend ./frontend
          docker tag rag-frontend:latest $ECR_FRONTEND_URL:latest
          docker push $ECR_FRONTEND_URL:latest

      # ---------------------------
      # ECS Deployment
      # ---------------------------
      - name: Update ECS Service (Force New Deployment)
        run: |
          aws ecs update-service \
            --cluster $ECS_CLUSTER_NAME \
            --service $ECS_SERVICE_NAME \
            --force-new-deployment
